trigger:
- master

jobs:
- job: macOS
  pool:
    vmImage: 'macOS-10.13'
  strategy:
    maxParallel: 10
    matrix:
      Xcode 9.0.1:
        DEVELOPER_DIR: '/Applications/Xcode_9.0.1.app'
      Xcode 9.1:
        DEVELOPER_DIR: '/Applications/Xcode_9.1.app'
      Xcode 9.2:
        DEVELOPER_DIR: '/Applications/Xcode_9.2.app'
      Xcode 9.3.1:
        DEVELOPER_DIR: '/Applications/Xcode_9.3.1.app'
      Xcode 9.4.1:
        DEVELOPER_DIR: '/Applications/Xcode_9.4.1.app'
      Xcode 10:
        DEVELOPER_DIR: '/Applications/Xcode_10.app'
        XCODE_FLAGS: '$(XCODE_FLAGS) -parallel-testing-enabled NO'
      Xcode 10.1:
        DEVELOPER_DIR: '/Applications/Xcode_10.1.app'
        XCODE_FLAGS: '$(XCODE_FLAGS) -parallel-testing-enabled NO'
  variables:
    XCODE_FLAGS: -scheme Base32
  steps:
    - script: |
        xcodebuild -version
        echo $XCODE_FLAGS
      displayName: xcodebuild -version & echo XCODE_FLAGS
    - script: >
        set -o pipefail &&
        xcodebuild $XCODE_FLAGS test |
        xcpretty -r junit -o build/reports/xcodebuild-macOS.xml
      displayName: tests on macOS
      condition: succeededOrFailed()
    - script: >
        set -o pipefail &&
        xcodebuild $XCODE_FLAGS test -sdk iphonesimulator -destination "name=iPhone 8" |
        xcpretty -r junit -o build/reports/xcodebuild-iOS.xml
      displayName: tests on iOS
      condition: succeededOrFailed()
    - script: >
        set -o pipefail &&
        xcodebuild $XCODE_FLAGS test -sdk appletvsimulator -destination "name=Apple TV 4K" |
        xcpretty -r junit -o build/reports/xcodebuild-tvOS.xml
      displayName: tests on tvOS
      condition: succeededOrFailed()
    - script: >
        set -o pipefail &&
        xcodebuild $XCODE_FLAGS build -sdk watchsimulator -destination "name=Apple Watch Series 3 - 38mm" |
        xcpretty
      displayName: build on watchOS
      condition: succeededOrFailed()
    - script: >
        set -o pipefail &&
        swift test 2>&1 |
        xcpretty -r junit -o build/reports/swift-test.xml
      displayName: swift test
      condition: succeededOrFailed()
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: build/reports/**
      condition: succeededOrFailed()

- job: pod_lib_lint
  pool:
    vmImage: 'macOS-10.13'
  variables:
    DEVELOPER_DIR: '/Applications/Xcode_9.4.1.app'
  steps:
    - script: pod lib lint
      displayName: pod lib lint
